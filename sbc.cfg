#
#    Bootloader linker file
#
#    Micheal Burin
#
#    This is a modified config taken from the cc65 toochain
#        http://www.cc65.org/
#           cc65/cfg/supervision.cfg
#        With help from the tutorial
#            http://www.cc65.org/doc/customizing.html
#

MEMORY {
# zero page RAM
    # cc65 runtime uses 26 zero page locations. Smallest allowed is $1A
    ZP:        start =    $0, size =  $100, type   = rw, define = yes;

# 65c02 stack is at $100 - $1FF
    #...save room for stack
    RAM:       start =  $200, size = $6800, define = yes;
    ROM:       start = $E000, size = $2000, file   = %O;
    STACK:     start = $7000, size = $1000, define = yes;
}

SEGMENTS {
#These are in order that they are stacked in memory

# SRAM
    ZEROPAGE:  load = ZP,  type = zp,  define   = yes;
    BSS:       load = RAM, type = bss, define   = yes;
    HEAP:      load = RAM, type = bss, optional = yes;

# ROM
    RODATA:    load = ROM, type = ro;
    # The copydata routine does this
    DATA:      load = ROM,  run = RAM, type = rw,  define = yes;

  #What does this do? Needed by linker...
    ONCE:       load = ROM, type = ro, optional = yes;

    STARTUP:   load = ROM, type = ro;
    INIT:      load = ROM, type = ro, optional = yes;
    CODE:      load = ROM, type = ro;
    VECTORS:   load = ROM, type = ro,  start    = $FFFA;
}

#Marks symbols in the libraries to be
# put in constructor/destructor tables
FEATURES {
    CONDES:    segment = STARTUP,
                         # initlib
               type    = constructor,
               label   = __CONSTRUCTOR_TABLE__,
               count   = __CONSTRUCTOR_COUNT__;
    CONDES:    segment = STARTUP,
                         # donelib
               type    = destructor,
               label   = __DESTRUCTOR_TABLE__,
               count   = __DESTRUCTOR_COUNT__;
}

# Replaced with STACK: above
#SYMBOLS {
#    # Define the stack size for the application
#        # Heap, if used, needs to know this
#    __STACK_SIZE__:  value = $1000, type = weak;
#}

